=== Dynamic Memory Cheating ===

Before we start: You should have read the static memory doc.

Dynamic memory cheating always requires a preloader which loads a memory
hacking library into the game process. Ugtrain has a preloader feature and
"libmemhack" for that. The library gets the unique code addresses of unique
"malloc()" calls and their reverse stack offsets as a config through a FIFO.
The lib reports back through another FIFO which objects have been allocated
to which memory addresses. It also keeps track of these memory addresses and
sends the information about the freeing of these memory objects through the
output FIFO. This is required for stability.
You can call this "dynamic memory spying" if you will. This is completely
different from the default method of Cheat Engine. They follow access pointers
to one on static memory. But static memory is difficult to adapt.

== Details ==

The preloader feature (-P) only appends libmemhack to the environment variable
"LD_PRELOAD" and runs the game. The dynamic loader "ld.so" does the rest. You
can choose further preloaders if you want like "glc-capture" for recording a
game cheating video. It is only important that this preloader also appends to
"LD_PRELOAD". The ugtrain sets an environment variable with the game process
name. This way libmemhack/disc knows when to activate itself (not in another
preloader, not in a shell, etc.). This also works for pure static memory.
See the "--pre-cmd" and "--glc" options of ugtrain.

The lib has a constructor function, a malloc() and a free() hook. It wraps
these functions. In the constructor the lib opens the input and the output
FIFO and tries for 1 second to read the config. If there is no config or there
is an error in the config, then it doesn't get active. This means that it
operates like libc malloc() and free(). But activated, it compares for each
malloc first the malloc size and then the code address at the reverse stack
offset with the config. If it matches, it sends the code and the memory address
(returned by libc malloc) through the FIFO. The memory address is put into the
in-memory config to be used for the free() hook. There we only compare memory
addresses in order to find a free() which is relevant to be reported for now.
One could think about backtracing there as well for optimization but how to
discover/adapt that and ensure that we've found all free() calls for that
class?!

The in-memory config is at a static memory location and uses a fixed size of
e.g. four memory pages (4 * 4096 bytes). In this memory area libmemhack stores
all important data like config pointers, config entries and the memory
addresses of the currently allocated objects. These are filled with an invalid
pointer value in the constructor and the last value is always that invalid
pointer. This way free() only iterates until it hits an invalid pointer. Upon
a free() the found memory address is set to NULL and malloc() can re-use it.
This way the first invalid pointer represents the number of objects which had
to be kept track of at once. The more objects there are, the slower it gets.
All this is quite hacky but it's the most flexible way with performance in
mind.

Note: The constructor tells the user of how many memory objects per memory
class libmemhack can keep track of. The more classes you configure, the less it
gets. And don't worry: libmemhack gets an own independent memory area for its
config data. So static memory cheating works no matter if libmemhack is
preloaded or not.

== ugtrain Specialties ==

The command-line option '-P' is recommended for dynamic memory cheating. With
that libmemhack is preloaded, the libraries are configured with the game
process name and the game is started automatically. The advantage compared to
manually preloading and separately starting is that root permissions aren't
required (for ptrace). They are in the same process group!

Required config options: "dynmemstart", "dynmemend", >= 1 value inside
Related config options: "checko"
FIFOs: /tmp/memhack_in, /tmp/memhack_out

Value locations are used as offsets within the objects. They become only active
if at least one object has been allocated. The lib sends the code and the
memory address through the FIFO to ugtrain. The ugtrain appends this to a
vector of memory addresses in the right memory class then. It also grows the
old value vectors per configured value in that class. This way ugtrain always
knows which value was in memory before changing it and can show it to the user.
Displaying all values at once would be too much. This is why ugtrain uses a
print index. With the keys '+' and '-' the print index for all memory classes
is increased or decreased. In case you need a snapshot/dump of all objects, use
the '>' key.

We can use a special check ("checko") if the allocated object belongs to us or
otherwise to an opponent. If it fails, it removes the object from the active
ugtrain in-memory config by setting its memory address to NULL. Following
values in that object are not processed anymore. After leaving the critical
section, the object is removed from the vectors and freed. Afterwards the user
is informed. This behaves very similar like having received a free() from
libmemhack.

But keep in mind: libmemhack doesn't know about that. It still tracks kicked-
out objects and will send a free() for these.

The rest works the same way as with static memory.

== Hardened Security ==

With a PIE (position independent executable) and ASLR the code addresses on
the stack are randomized. Ugtrain determines the load address of the executable
from /proc/$pid/maps and sends it to libmemhack. Libmemhack adds it to the
configured code addresses afterwards.

== Alternative to LD_PRELOAD ==

There are high security environments like MeeGo 1.2 Harmattan on the Nokia
N9/N900 smart phone with a security kernel module. On these a regular user
is not allowed to use LD_PRELOAD. In this case make a backup of the original
ELF binary and use "patchelf --add-needed <lib> <filename>" to add libmemhack/
disc directly into the .dynsym and .dynamic sections in front of all other
libraries. Run ugtrain with '-P -' to tell it that LD_PRELOAD is not available
and that the library will be loaded anyways.

The other functionality like with LD_PRELOAD is exactly the same.

=== Dynamic Memory Discovery ===

For discovery another library is required ("libmemdisc"). This one takes a
stage number and the stage parameters as config and is preloaded as well.

Discovery is done in the following stages:

1. Find the malloc size           (all mallocs and frees are recorded)
2. Verify the malloc size         (frees are ignored)
3. Find the code address
4. Find the reverse stack offset

The ugtrain option '-D' helps with that. It assumes '-P' and libmemdisc. All
we need are the following stage parameters for the '-D' option:

1. "StageNr[;HeapStartOffs;HeapEndOffs]"
2. "StageNr[;HeapStartOffs;HeapEndOffs;MemSize]"
3. "StageNr;HeapStartOffs;HeapEndOffs;MemSize[;CodeStart;CodeEnd]"
4. "StageNr;HeapStartOffs;HeapEndOffs;MemSize[;CodeStart;CodeEnd][;CodeAddr]"

Examples:

1. "1", "1;0x0;0x0", "1;0x200000;0x350000"
2. "2", "2;0x0;0x0;0", "2;0x200000;0x350000;288"
3. "3;0x0;0x0;288", "3;0x200000;0x350000;288;0x404d50;0x425c88"
4. "4;0x0;0x0;288", "4;0x200000;0x350000;288;0x404d50;0x425c88;0x40f4e7"

You see, we can also do this in only two stages: stages 2 and 4. Size 0 means
that all sizes are recorded in stage 2. The ugtrain expands the first example
string to the second in stages 1 and 2. 0x0;0x0 in the heap filter means
unfiltered. The libmemdisc tells you about heap start and stack end. In stages
3 and 4 ugtrain finds out the code start and end for you by "objdump -p"-based
binary header extraction. Only the malloc size is important there.

Returns:

1. "m0x87acd0;s288", "f0x87acd0"
--> 'm' for malloc and 'f' for free, the address is the memory address of
the object, 's' is the size in bytes
2. "m0x87acd0;s288"
3. "m0x87acd0;s288;c0x40f4e7;c0x417801"
--> 'c' is the code address in the backtrace
4. "m0x87acd0;s288;c0x40f4e7;o0x28;c0x417801;o0x48"
--> 'o' is the reverse stack offset of the code address

The results are written with caching directly from /tmp/memhack_out into the
file /tmp/memhack_file. After ending the game ugtrain asks you for a memory
address from parallel static memory search. Enter it and ugtrain will search
for the matching malloc calls. It is very likely that interesting objects
are kept until game end. So they should be at the end of that list. But as in
stages 3 and 4 the "objdump -D"-based symbol lookup is quite slow, we reverse
that list and the interesting malloc is at the top. This way you can interrupt
the symbol lookup earlier. It is really important to end the game directly and
not to return to the game main menu as further allocations could occur there.
Like in static memory search the -S option is important here.

Discovery preparation:

Write the process name of the game into a config file. The PID is determined
from that and it must be located in the first line. We use the game Chromium
B.S.U. 64-bit as an example here.

$ echo "chromium-bsu" > test.conf

Optional:

If the game is not in the PATH env. var., then we can add an absolute path but
it has to end with the process name.

$ echo "game_path /usr/games/bin/chromium-bsu" >> test.conf

Example stage 2:

$ ugtrain -S -D "2" test.conf
...
Memory address (e.g. 0xdeadbeef): 0x87ad8c
Searching reverse for 0x87ad8c in discovery output..
m0x87acd0;s288 contains 0x87ad8c, offs: 0xbc, heap offs: 0x2257f0
m0x87acd0;s344 contains 0x87ad8c, offs: 0xbc, heap offs: 0x2257f0
m0x87acd0;s344 contains 0x87ad8c, offs: 0xbc, heap offs: 0x2257f0
...

This shows us that the malloc size is 288 bytes and the offset in the object
is 0xbc (used the lives in the HeroAircraft object in Chromium B.S.U. 64-bit).
We also get to know the heap offset.

Example stage 4:

$ ugtrain -S -D "4;0x0;0x0;288" test.conf
...
Memory address (e.g. 0xdeadbeef): 0x8a605c
Searching reverse for 0x8a605c in discovery output..
m0x8a5fa0;s288 contains 0x8a605c, offs: 0xbc, heap offs: 0x250ac0
c0x40f4e7;o0x28 <_Znwm@plt>
c0x417801;o0x48
c0x404be6;o0x78
...

Only <*@plt> direct library calls are displayed and "_Znwm" on the first
position is exactly what we are looking for. It is a GNU C++ internal function
which calls "malloc" internally. On 32-bit systems it is called "_Znwj".
We can see the reverse stack offset is 0x28. It would be lower if "malloc"
would have been called directly from the game binary (e.g. 0x8). We also
get to know the jump-back code address 0x40f4e7.

That's it! We can write a basic config for the lives in chromium-bsu. We
start with a watcher in order to verify that our findings are correct. It
is often better to use the smallest possible data type. Later it can be
possibly discovered that a larger type is used. E.g. here when letting
too many enemies through, the lives are set to -1 (0xffffffff). When hex
dumping this, we see that we actually have a 32-bit signed integer here.

chromium-bsu
dynmemstart HeroAircraft 288 0x40f4e7 0x28
Lives 0xbc i32 watch
dynmemend

See examples/README for the complete config syntax.

$ ugtrain -P test.conf

When being sure, you can add the checks and the wish value, assign one or
more comma-separated activation keys and set the initial activation state.

...
Lives 0xbc i32 l 9 1,0 a
check 0xbc i32 g 0
...

Here, we want the lives to be updated to 9 only if they are less than 9 and
also greater than 0. Otherwise, unexpected behaviour could happen. We also
want to be sure that we are on the correct memory address in case of adaption.
With the keys '1' and '0' we can toggle the activation of this value. The
ugtrain uses non-blocking getchar just like the Linux command "top". In the
last column the 'a' means that this is activated at trainer start.


=== Finding more Values in Dynamic Memory ===

In the game we can use the object dump now by pressing the '>' key. For our
example there should be the HeroAircraft object dumped as "0_000.dump". Before
the '_' there is the class index and after it the object index. Just compare
two dumps: when you are low on everything and when you are high on everything.
This way you can easily find other values like ammo and shields. A zero is also
with a float a zero in hex. The .dump files are binary files so either you use
a binary diff tool or you convert them into text first and use a text diff tool
like e.g. "meld". Conversion can be done as follows:

$ xxd 0_000.dump > 0_000.dump.txt

The tool "xxd" is part of the "vim" package.

Note: Dumping objects to existing files overwrites them. So rename them before
dumping another state.

Here, in the "doc" directory you can find the files 0_000_low.dump.txt and
0_000_hig.dump.txt. These represent the HeroAircraft object. In the first state
there are no shields, no extra weapons and we are very close to be destroyed.
In the other state there are extra shields and full extra weapons. Compare the
files with a text diff tool. We mainly search for transitions from zero to a
quite high number and patterns of three times the same value (for ammo).

Remember: Everything is stored little-endian and very likely memory aligned.

Have you found the other values?

At offset 0x58 it looks like we have a bool array related to weapons. Bools are
often stored as u8, esp. in standard C99/C++. We have three times transition
from false (0x0) to true (0x1) and the following byte seems to be unused for
padding/alignment and remains 0x0.

We are looking for low precision values with some zeros still in them - either
integers or floats. In front of the lives only 0xb8 looks interesting like a
negative float but -16.875 doesn't sound reasonable. Instead the location 0xd0
looks very good: We have three times 0x43160000 (150.0). Yes, looks like we've
found the ammo array as floats! Hmmm, another 3 values float array follows
with transition from -1.0 to -0.02. That's the gun pause and not interesting
for us as we can't make the guns shoot faster. Let's proceed to 0xec. We have
a float transition from -21.6 to -500.0. Looks like they store the health as
a negative damage value. Like we know programmers, we must be very close to
the shields, now. Indeed, at 0xf0 there is a transition to 992.3. It is very
difficult to retain full shields very long but from here we can guess that
1000.0 is the maximum. We can also work with the dynamic wish value 'max' in
the config to verify. The next value at 0xf4 seems to be a float as well. It
is a transition from 5150.0 to 7250.0. This must be the score. It took a
little longer to acquire the weapons and shields. Strange that they store it
as float! Cheating it doesn't make much sense, so we ignore or just watch it.

== Multiple Objects ==

If you've got a lot of objects and don't know exactly which ones are yours and
which ones are enemies, use the binary diff tool "ugsimfind". It compares upto
100 object files byte by byte and tells you for each byte its value as well as
how many and which files have the same value. This is very very useful if you
are searching the u8 player ID in Warzone 2100 Droids. Use it as follows:

$ ugsimfind 0_*.dump | less

fidx: 0x22
0x00 '.' : 7    0_000.dump, 0_001.dump, 0_042.dump, 0_043.dump, 0_044.dump,
0_045.dump, 0_046.dump,
0x07 '.' : 26   0_002.dump, 0_003.dump, 0_004.dump, 0_005.dump, 0_006.dump,
0_007.dump, 0_008.dump, ...,
0x06 '.' : 14   0_010.dump, 0_011.dump, 0_012.dump, 0_019.dump, 0_020.dump,
0_021.dump, 0_022.dump, ...,

The campaign starts with 7 own Droids and 40 enemies in Warzone 2100. From the
name string we know that these files are exactly these 7 own Droids. We have
player ID 0 and the AI has ID 6 and ID 7. So at offset 0x22 is our player ID.


=== Dynamic Memory Adaption ===

Example configs will ask you if you want to do adaption when using them for the
first time. You should accept. This looks e.g. like this:

$ ugtrain -P examples/chromium-bsu64
...
Adaption to your compiler/game version is required.
Adaption script: examples/adapt/chromium-bsu_adapt64.sh
Run the adaption script, now (y/n)? : y

If you're not sure here, just take a look at the adaption shell script. It
searches for an unique call to "_Znwm", "_Znwj" or "malloc" in the disassembly
(objdump -D) of the game binary. If it fails, it doesn't return anything. Then,
you have to try to set the option "DEBUG=1" in examples/adapt/_common_adapt.sh
and to run the adaption script alone. If you still can't fix adaption, then
you have to do full discovery.

$ examples/adapt/chromium-bsu_adapt64.sh `which chromium-bsu`

In our case adaption succeeds:
...
Adaption return:
1;HeroAircraft;0x410e17
Class HeroAircraft, old_code: 0x40f4e7, new_code: 0x410e17
Adapt reverse stack offset(s) (y/n)? : y

Most of the time the reverse stack offset is always the same but just in case
that there was a change from "malloc" to "_Znwm"/"_Znwj", we can adapt it here.
If the malloc size changed as well, then there is likely another config for
that specific game version. In examples it is noted for which game versions
they work adapted. If you say "n" here, then we are ready and the config is
written back.
But if you say "y", the game starts with a discovery stage 5 string. E.g:
"5;0x0;0x0;288;0x410e17;0x410e17;0x410e17". This behaves like stage 4. The
difference is in the processing in ugtrain. All you need to do in the game
is ensuring that at least one object of the currently discovered memory class
gets allocated. This also repeats until all classes are discovered and then
the config is written back. The config command "adapt_required" is set to "0"
so that you don't get bothered with the adaption wish again.

...
Class HeroAircraft:
old_offs: 0x28, new_offs: 0x28
Discovery successful!
Writing back config..
...

After successful adaption the game is started automatically with libmemhack
preloaded and you can see if the new config works.

You can also trigger this procedure explicitly with the -A option.

E.g.:
$ ugtrain -A examples/chromium-bsu64


=== Known Issues ===

Issue:
Memory allocations of GNOME games can't be discovered.

These use functions like g_malloc() and g_slice_alloc() which are only
available in GLIB/GTK environments.

Solution:
Configure ugtrain build with "./configure --enable-glib".

===

Issue:
LD_PRELOAD is ignored if set-group-ID bit is set.

$ ls -l /usr/games
-rwxr-xr-x 1 root root      567 Jan 15  2013 gnome-sudoku
-rwxr-sr-x 1 root games  132624 Jan 15  2013 gnomine
-rwxr-sr-x 1 root games  149016 Jan 15  2013 mahjongg
-rwxr-xr-x 1 root root   224328 Apr 16  2012 sol

In this case we would have no chance to hook functions of "gnomine" or
"mahjongg".

Solution:
Remove the set-group-ID bit for them and add yourself into the related group
("games" here) if required.

$ sudo chmod g-s /usr/games/mahjongg /usr/games/gnomine
