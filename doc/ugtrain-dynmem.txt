=== Dynamic Memory Cheating ===

Before you start: You should have read the static memory doc.

Dynamic memory cheating always requires a preloader which loads a memory
hacking library into the game process. Ugtrain has a preloader feature and
"libmemhack" for that. The library gets the unique code addresses of unique
"malloc()" calls and their reverse stack offsets as a config through a FIFO.
The lib reports back through another FIFO which objects have been allocated
to which memory addresses. It also keeps track of these memory addresses and
sends the information about the freeing of these memory objects through the
output FIFO. This is required for stability.
You can call this "dynamic memory spying" if you will. This is completely
different from the default method of Cheat Engine. They follow access pointers
to one on static memory. But static memory is difficult to adapt.

== Details ==

The preloader feature (-P) only appends libmemhack to the environment variable
"LD_PRELOAD" and runs the game. The dynamic loader "ld.so" does the rest. You
can choose further preloaders if you want like "glc-capture" for recording a
game cheating video. It is only important that this preloader also appends to
"LD_PRELOAD". The ugtrain sets an environment variable with the game process
name. This way libmemhack/disc knows when to activate itself (not in another
preloader, not in a shell, etc.). This also works for pure static memory.
See the "--pre-cmd" and "--glc" options of ugtrain.

The lib has a constructor function, malloc() and free() hooks. It wraps
these functions. In the constructor the lib opens the input and the output
FIFO and tries for 1 second to read the config. If there is no config or there
is an error in the config, then it does not get active. This means that it
operates like libc malloc() and free(). But activated, it compares for each
malloc first the malloc size and then the code address at the reverse stack
offset with the config. If it matches, it sends the code and the memory address
(returned by libc malloc) through the FIFO. The memory address is put into the
in-memory config to be used for the free() hook. There only memory addresses
are compared in order to find a free() which is relevant to be reported for now.
One could think about backtracing there as well for optimization but how to
discover/adapt that and ensure that all free() calls are found for that class?!

The in-memory config is stored as an array of config entries on the heap. An
array of memory addresses of the currently allocated objects is part of a
config entry. It grows dynamically with a size-doubling allocator with a mutex
held. The memory addresses are filled with an invalid pointer value and the last
value is always that invalid pointer. This way free() only iterates until it
hits an invalid pointer. Upon a free() the found memory address is set to NULL
and malloc() can re-use it. This way the first invalid pointer represents the
number of objects which had to be kept track of at once. The more objects there
are, the slower it gets.

== ugtrain Specialties ==

The command-line option '-P' is required for dynamic memory cheating. With
that libmemhack is preloaded, the libraries are configured with the game
process name and the game is started automatically. The advantage compared to
manually preloading and separately starting is that root permissions are not
required (for ptrace). They are in the same process group! Furthermore, the
library and ugtrain communicate to bypass security measures.

Required config options: "dynmemstart", "dynmemend", >= 1 value inside
Related config options: "checko"
FIFOs: /tmp/memhack_in, /tmp/memhack_out

Value locations are used as offsets within the objects. They become only active
if at least one object has been allocated. The lib sends the code and the
memory address through the FIFO to ugtrain. The ugtrain appends this to a
vector of memory addresses in the related memory class then. It also grows the
old value vectors per configured value in that class. This way ugtrain always
knows which value was in memory before changing it and can show it to the user.
Displaying all values at once would be too much. This is why ugtrain uses a
print index. With the keys '+' and '-' the print index for all memory classes
is increased or decreased. In case you need a snapshot/dump of all objects, use
the '>' key.

You can use a special check ("checko") if the allocated object belongs to you or
to an opponent otherwise. If it fails, it removes the object from the active
ugtrain in-memory config by setting its memory address to NULL. Following
values in that object are not processed anymore. After leaving the critical
section, the object is removed from the vectors and freed. Afterwards the user
is informed. This behaves very similar to having received a free() from
libmemhack.

But keep in mind: libmemhack does not know about that. It still tracks kicked-
out objects and will send a free() for these.

The rest works the same way as with static memory.

== Hardened Security ==

With a PIE (position independent executable) and ASLR (address space layout
randomization) the code addresses on the stack are randomized. Ugtrain
determines the load address of the executable from /proc/$pid/maps and
sends it to libmemhack. Libmemhack adds it to the configured code addresses
afterwards. E.g. Ubuntu uses PIE on everything since version 13.04.


=== Dynamic Memory Discovery ===

For discovery another library is required ("libmemdisc"). This one takes a
stage number and the stage parameters as config and is preloaded as well.

Discovery is done in the following stages:

1. Find the malloc size           (all mallocs and frees are recorded)
2. Verify the malloc size         (frees are ignored)
3. Find the code address
4. Find the reverse stack offset

The ugtrain option '-D' helps with that. It assumes '-P' and libmemdisc. All
what is needed are the following stage parameters for the '-D' option:

1. "StageNr[;HeapStartOffs;HeapEndOffs]"
2. "StageNr[[;HeapStartOffs;HeapEndOffs];MemSize]"
3. "StageNr[;gbt][;CodeFilter][;HeapStartOffs;HeapEndOffs];MemSize[;CodeAddr]"
4. "StageNr[;CodeFilter][;HeapStartOffs;HeapEndOffs];MemSize[;CodeAddr]"

Examples:

1. "1", "1;0x200000;0x350000"
2. "2", "2;0", "2;288", "2;0x200000;0x350000;288"
3. "3;288", "3;exe;288", "3;gbt;exe;0x200000;0x350000;288"
4. "4;288", "4;exe;288", "4;exe;0x200000;0x350000;288;0x40f4e7"

You see, this can also be done in only two stages: stages 2 and 4. Size 0 means
that all sizes are recorded in stage 2. The ugtrain expands the first example
string to the second in stage 2. The heap filter is completely optional and
rarely used. The libmemdisc tells you about heap start and stack end. In stages
3 and 4 ugtrain finds out the code start and end for you for the code filter
you have specified. It reads from /proc/$pid/maps to find them. Use "exe" to
filter the backtrace output to the executable. A library name like e.g.
"libbt_objects.so" filters the backtrace to a library. Without a code filter
set ugtrain shows all code addresses it finds in the backtrace. Only the malloc
size is important in these stages.

Returns:

1. "m0x87acd0;s288", "f0x87acd0"
--> 'm' for malloc and 'f' for free, the address is the memory address of
the object, 's' is the size in bytes
2. "m0x87acd0;s288"
3. "m0x87acd0;s288;c0x40f4e7;c0x417801"
--> 'c' is the code address in the backtrace
4. "m0x87acd0;s288;c0x40f4e7;o0x28;c0x417801;o0x48"
--> 'o' is the reverse stack offset of the code address

The results are written with caching directly from /tmp/memhack_out into the
file /tmp/memhack_file. There is a flush when terminating the game process
regularly in case that there is only a small amount of data. After ending the
game ugtrain asks you for a memory address from static memory search in
parallel. Enter it and ugtrain will search for the matching malloc calls. It
is very likely that interesting objects are kept until game end. So they should
be at the end of that list. But as in stages 3 and 4 the "objdump -D"-based
symbol lookup might be quite slow, the list is reversed and the interesting
malloc is at the top. This way you can interrupt the symbol lookup earlier.
It is really important to end the game directly and not to return to the game
main menu as further allocations to the same memory space could occur there.
Like in static memory search the -S option is important here.

Discovery preparation:

Write the process name of the game into a config file. The PID is determined
from that and it must be located in the first line. The game Chromium B.S.U.
64 bit is used as an example here with PIE.

$ echo "chromium-bsu" > test.conf

Optional:

If the game is not in the PATH env. var., then you can add an absolute path
but it has to end with the process name.

$ echo "game_path /usr/games/bin/chromium-bsu" >> test.conf

Example stage 2:

$ ugtrain -D "2" -S test.conf
...
1> list
[ 0] 7f776a639a8c, 30 +       998a8c,  heap, 2, [I64 I32 I16 I8 ]
1> set 9
info: setting *0x7f776a639a8c to 9...
1> exit
Memory address (e.g. 0xdeadbeef): 0x7f776a639a8c
Searching reverse for 0x7f776a639a8c in discovery output..
m0x7f776a6399d0;s288 contains 0x7f776a639a8c, offs: 0xbc, heap offs: 0x988500
m0x7f776a6398e0;s8192 contains 0x7f776a639a8c, offs: 0x1ac, heap offs: 0x988410
m0x7f776a639170;s8192 contains 0x7f776a639a8c, offs: 0x91c, heap offs: 0x987ca0
...

This shows you that the malloc size is 288 bytes and the offset in the object
is 0xbc (used the lives in the HeroAircraft object in Chromium B.S.U. 64 bit).
You also get to know the heap offset.

Example stage 4:

$ ugtrain -D "4;288" -S test.conf
...
Memory address (e.g. 0xdeadbeef): 0x7fb14577b95c
Searching reverse for 0x7fb14577b95c in discovery output..
m0x7fb14577b8a0;s288 contains 0x7fb14577b95c, offs: 0xbc, heap offs: 0x97e5b0
c0x7fb144ddf400;o0x0
c0x5ef2d;o0x8 libstdc++.so.6.0.19 <malloc@plt>
c0x0;o0x10
c0x7fb14527e860;o0x18
c0x7fb144ddf400;o0x20
c0x14b57;o0x28 chromium-bsu <_Znwm@plt>
...

The names of libraries and the executable are only shown if their code addresses
are found on the stack. Their load address is subtracted automatically from
their found code addresses then.
Only <*@plt> direct library calls are displayed and "_Znwm" on the last
position is exactly what to look for. It is a GNU C++ internal function
(part of the "new" operator) which calls "malloc" internally. On 32 bit systems
it is called "_Znwj".
You can see the reverse stack offset is 0x28. It would be lower if "malloc"
would have been called directly from the game binary (e.g. 0x8). You also
get to know the jump-back code address 0x14b57.

That is it! You can write a basic config for the lives in chromium-bsu.
Start with a watcher in order to verify that your findings are correct. It
is often better to use the smallest possible data type. Later it can be
possibly discovered that a larger type is used. E.g. here when letting
too many enemies through, the lives are set to -1 (0xffffffff). When hex
dumping this (pressing the '>' key), you would see that there is actually
a 32 bit signed integer here.

chromium-bsu
dynmemstart HeroAircraft 288 0x14b57 0x28
Lives 0xbc i32 watch
dynmemend

See examples/README for the complete config syntax.

$ ugtrain -P test.conf

Now run your discovered config with memory hacking and watch how the lives
value changes. When being sure about it, you can add the checks and the
wish value, assign one or more comma-separated activation keys and set
the initial activation state. The lives are frozen to the wish value then.

...
Lives 0xbc i32 l 9 1,0 a
check 0xbc i32 g 0
...

Here you would want the lives to be updated to 9 only if they are less than 9
and also greater than 0. Otherwise, unexpected behavior could happen. This also
ensures being on the correct memory address in case of adaption.
With the keys '1' and '0' you can toggle the activation of this value. The
ugtrain uses non-blocking getchar() just like the Linux command "top". In the
last column the 'a' means that this is activated at trainer start.

$ ugtrain -P test.conf
...
Starting game with libmemhack64.so preloaded..
...
[memhack] config[0]: mem_size: 288; code_addr: 0x14b57; stack_offs: 0x28
exe_offs: 0x7fbc12ded000
PIE (position independent executable) detected!
===> Obj. HeroAircraft created 1 time(s); now: 1
*HeroAircraft[0] = 0x7fbc13df9f40, 1 obj.
Lives at 0x7fbc13df9ffc, Data: 0x4 (4)
*HeroAircraft[0] = 0x7fbc13df9f40, 1 obj.
Lives at 0x7fbc13df9ffc, Data: 0x9 (9)
...
===> Obj. HeroAircraft freed 1 time(s); remaining: 0

The lives are frozen to 9. So freezing your first value in dynamic memory works.
This is with PIE as the load address of the executable has to be added back
to the configured code address. Without PIE the load address of the executable
would be always at 0x400000 on x86_64 and would be configured as is without
adding something to it when running the game.


=== Finding more Values in Dynamic Memory ===

When running ugtrain with memory hacking you can use the object dump now by
pressing the '>' key. For the example there is the HeroAircraft object dumped
as "0_000.dump". In front of the '_' there is the class index and behind it the
object index. The next dump renames the existing dump file to "0_000~.dump" and
overwrites in case such file already exists. This way always upto two states for
a memory object are stored.

Do the first dump when you are low on everything (ammo, shields, etc.) and the
second one when you are high on everything. Then just compare both dumps with a
binary diff tool like e.g. "vbindiff". This way you can easily find other values
like ammo and shields. Zero is also with a float zero in hex.

$ vbindiff 0_000~.dump 0_000.dump

If a text diff tool like e.g. "meld" fits you better, then you will need to
convert the files into hex text first. This is done e.g. with the tool "xxd"
which is part of the "vim" package.

$ xxd 0_000~.dump > 0_000~.dump.txt
$ xxd 0_000.dump > 0_000.dump.txt
$ meld 0_000~.dump.txt 0_000.dump.txt

Here in the "doc" directory you can find these files for the HeroAircraft
example. In the first state (0_000~.dump) there are no shields, no extra
weapons and the aircraft is very close to being destroyed. In the other state
there are extra shields, no damage and all extra weapons with full ammo. Compare
the files. Search mainly for transitions from zero to a quite high number and
patterns of three times the same value (for weapons or ammo).

Remember: Everything is stored little-endian and very likely memory aligned.

Have you found the other values?

At offset 0x58 it looks like having a bool array related to weapons. Bools are
often stored as u8, esp. in standard C99/C++. There is three times transition
from false (0x0) to true (0x1) and the following byte seems to be unused for
padding/alignment and remains 0x0.

Look for low precision values with some zeros still in them - either integers
or floats. In front of the lives only 0xb8 looks interesting like a negative
float but -16.875 does not sound reasonable. Instead the location 0xd0 looks
very good: There is three times 0x43160000 (150.0). Yes, looks like having
found the ammo array as floats! Hmmm, another 3 values float array follows
with transition from -1.0 to -0.02. That is the gun pause and not interesting
as it is not possible to make the guns shoot faster. Proceed to 0xec. You see
a float transition from -21.6 to -500.0. Looks like they store the armor points
as a negative damage value. You should be very close to the shields now as this
would be typical for programmers. Indeed, at 0xf0 there is a transition to
992.3. It is very difficult to retain full shields for very long time but from
here you can guess that 1000.0 is the maximum. You can also work with the
dynamic wish value 'max' in the config to verify. The next value at 0xf4
seems to be a float as well. It is a transition from 5150.0 to 7250.0. This
must be the score. It took a little longer to acquire the weapons and shields
- so there is higher score. Strange that they store it as float! Modifying it
does not make much sense, so ignore or just watch it.

Set up all values where you are guessing interesting values with watching first
to verify that they are the values you are looking for.

== Multiple Objects ==

If you have got a lot of objects and do not know exactly which ones are yours
and which ones are enemies, use the binary diff tool "ugsimfind". It compares
upto 100 object files byte by byte and tells you for each byte its value as well
as how many and which files have the same value. This is very very useful if you
are searching the u8 player ID in Warzone 2100 Droids. Use it as follows:

$ ugsimfind 0_*.dump | less

fidx: 0x22
0x00 '.' : 7    0_000.dump, 0_001.dump, 0_042.dump, 0_043.dump, 0_044.dump,
0_045.dump, 0_046.dump,
0x07 '.' : 26   0_002.dump, 0_003.dump, 0_004.dump, 0_005.dump, 0_006.dump,
0_007.dump, 0_008.dump, ...,
0x06 '.' : 14   0_010.dump, 0_011.dump, 0_012.dump, 0_019.dump, 0_020.dump,
0_021.dump, 0_022.dump, ...,

The campaign starts with 7 own Droids and 40 enemies in Warzone 2100. From the
name string inside you can see that these files are exactly these 7 own Droids.
You have player ID 0 and the AI has ID 6 and ID 7. So your player ID is located
at offset 0x22.


=== Dynamic Memory Adaption ===

Example configs will ask you if you want to do adaption when using them for the
first time. You should accept. This looks e.g. like this:

$ ugtrain -P examples/chromium-bsu64
...
Adaption to your compiler/game version is required.
Adaption script: examples/adapt/chromium-bsu_adapt64.sh
Run the adaption script, now (y/n)? : y

If you are not sure here, just take a look at the adaption shell script. It
searches for an unique call to "_Znwm", "_Znwj" or "malloc" in the disassembly
(objdump -D) of the game binary. If it fails, it does not return anything. Then
you have to try to run it manually with the game binary path and "DEBUG" as
parameters:

$ examples/adapt/chromium-bsu_adapt64.sh `which chromium-bsu` DEBUG

Please report the output to the ugtrain-devel mailing list to get help how to
fix the adaption.
If it is still not possible to fix the adaption, then you have to do full
discovery.

In this case adaption succeeds:
...
Adaption return:
1;HeroAircraft;0x410e17
Class HeroAircraft, old_code: 0x40f4e7, new_code: 0x410e17
Adapt reverse stack offset(s) (y/n)? : y

Most of the time the reverse stack offset is always the same but just in case
that there was a change from "malloc" to "_Znwm"/"_Znwj", you can adapt it here.
If the malloc size changed as well, then there is likely another config for
that specific game version. In examples it is noted for which game versions
they work adapted. If you say "n" here, then you are done and the config is
written back.
But if you say "y", the game starts with a discovery stage 5 string. E.g:
"5;288;0x410e17;0x410e17;0x410e17". This behaves like stage 4. The difference
is in the processing in ugtrain. All you need to do in the game is ensuring
that at least one object of the currently discovered memory class gets
allocated. This also repeats until all classes are discovered and then the
config is written back. The config command "adapt_required" is set to "0"
so that you do not get bothered with the adaption wish again.

...
Class HeroAircraft:
old_offs: 0x28, new_offs: 0x28
Discovery successful!
Writing back config..
...

After successful adaption the game is started automatically with libmemhack
preloaded and you can see if the new config works.

You can also trigger this procedure explicitly with the -A option.

E.g.:
$ ugtrain -A examples/chromium-bsu64


=== Known Issues ===

Issue:
Memory allocations of GNOME games cannot be discovered.

These use functions like g_malloc() and g_slice_alloc() which are only
available in GLIB/GTK environments.

Solution:
Configure ugtrain build with "./configure --enable-glib".

===

Issue:
LD_PRELOAD is ignored if the set-group-ID bit is set.

$ ls -l /usr/games
-rwxr-xr-x 1 root root      567 Jan 15  2013 gnome-sudoku
-rwxr-sr-x 1 root games  132624 Jan 15  2013 gnomine
-rwxr-sr-x 1 root games  149016 Jan 15  2013 mahjongg
-rwxr-xr-x 1 root root   224328 Apr 16  2012 sol

In this case you would have no chance to hook functions of "gnomine" or
"mahjongg".

Solution:
Remove the set-group-ID bit for them and add yourself into the related group
("games" here) if required.

$ sudo chmod g-s /usr/games/mahjongg /usr/games/gnomine

===

Issue:
LD_PRELOAD not effective (not allowed for regular user)

There are high security environments like MeeGo 1.2 Harmattan on the Nokia
N9/N900 smart phone with a security kernel module. On these a regular user
is not allowed to use LD_PRELOAD.

Solution:
In this case make a backup of the original ELF binary and use
"patchelf --add-needed <lib> <filename>" to add libmemhack/disc directly into
the .dynsym and .dynamic sections in front of all other libraries.
Run ugtrain with '-P -' to tell it that LD_PRELOAD is not available and that
the library will be loaded anyways.

The other functionality like with LD_PRELOAD is exactly the same.
